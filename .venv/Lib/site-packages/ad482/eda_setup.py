from pathlib import Path

import os
import click
from ad482.common import steps, tasks
from ad482.common.classroom import OcpClassroomConfig, workspace
from labs.common.userinterface import Console, echo
from labs.grading import Default as GuidedExercise

from .common.constants import KAFKA_CLUSTER_NAME, KAFKA_CLUSTER_NS_SUFFIX

DEFAULT_WORKDIR = Path.home().joinpath('AD482')
DEFAULT_KAFKA_CERT_PATH = DEFAULT_WORKDIR.joinpath('ca.cert')


class EDASetup(GuidedExercise):
    __LAB__ = "eda-setup"

    """
    Configures lab environment

    Configures the workspace directory.
    Saves the config in the $HOME/.grading/ad482-workspace.json file
    """

    def start(self):
        configure_workspace()

        items = [
            steps.check_ocp_api(),
            steps.check_ocp_credentials(),
            steps.create_ocp_projects([KAFKA_CLUSTER_NS_SUFFIX]),
            steps.create_kafka_cluster(KAFKA_CLUSTER_NAME, 2),
            {
                "label": "Storing your Apache Kafka settings",
                "task": tasks.store_kafka_credentials,
                "endpoint": workspace.config.ocp_api,
                "username": workspace.config.ocp_username,
                "fatal": True,
            },
            steps.create_env_files(),
        ]
        Console(items).run_items(action="Starting")

    def finish(self):
        steps = []
        Console(steps).run_items(action="Finishing")


def configure_workspace():
    """
    Prompt for configuration values
    """
    if os.environ.get("SKIP_WORKSPACE_CONFIG", False):
        return

    questions = [
        {
            "name": "workdir",
            "text": click.style("Enter your workspace directory:",
                                fg="white", bold=True),
            "default": workspace.config.workdir or str(DEFAULT_WORKDIR)
        },
        {
            "name": "ocp_api",
            "text": click.style("Enter the OpenShift API endpoint:",
                                fg="white", bold=True),
            "default": workspace.config.ocp_api or "https://"
        },
        {
            "name": "ocp_username",
            "text": click.style("Enter the OpenShift username:",
                                fg="white", bold=True),
            "default": workspace.config.ocp_username or ""
        },
        {
            "name": "ocp_password",
            "text": click.style("Enter the OpenShift password:",
                                fg="white", bold=True),
            "default": workspace.config.ocp_password or ""
        },
    ]

    echo("\nThis script configures the connection parameters to " +
         "access the OpenShift and Kafka clusters for your lab scripts.\n")

    answers = dict()
    for question in questions:
        prop_name = question.pop("name")
        answers[prop_name] = click.prompt(**question, type=str)

    workspace.configure(OcpClassroomConfig.from_dict(answers))
    echo(f"{workspace.config.workdir} set as workspace directory")
