
from ad482.common import grading, prechecks, steps
from labs.common.userinterface import Console
from labs.grading import Default as GuidedExercise
from pathlib import Path


class CollaborationAsync(GuidedExercise):

    __LAB__ = 'collaboration-async'

    """
    Lab: Creating Asynchronous Services with Event Collaboration
    """

    topics = [
        'low-profit-margin-alert',
        'wind-turbine-earnings',
        'wind-turbine-expenses',
        'wind-turbine-profit-margins',
    ]

    state_store_topics = [
        'earnings-aggregated',
        'expenses-aggregated',
        'wind-turbine-average-earnings',
        'wind-turbine-average-expenses'
    ]

    state_store_prefix = 'WindTurbineProfitMarginsPipeline_Subclass-'
    state_store_suffix = '-store-changelog'

    grading_topic = 'low-profit-margin-alert'
    grading_value = {
        'windTurbineId': 2,
        'rate': 0.0874
    }

    def start(self):
        prechecks.verify_config()
        items = [
            steps.pull_apps_repo(),
            steps.copy_lab_app(self.__LAB__, 'energy-profits'),
            steps.copy_env_file(Path(self.__LAB__, '.env'), '.env-streams'),
            steps.check_ocp_api(),
            steps.check_ocp_credentials(),
            steps.move_to_kafka_cluster_namespace(),
            steps.check_kafka_connection(),
            steps.create_topics(self.topics)
        ]
        Console(items).run_items(action='Starting')

    def finish(self):
        items = [
            steps.check_ocp_api(),
            steps.check_ocp_credentials(),
            steps.move_to_kafka_cluster_namespace(False),
            steps.delete_topics(self.topics),
            steps.delete_state_store_topics(self.state_store_topics)
        ]
        Console(items).run_items(action='Finishing')

    def grade(self):
        items = [
            steps.check_kafka_connection(),
            grading.verify_state_store_topics(
                self.state_store_topics,
                self.state_store_prefix,
                self.state_store_suffix
            ),
            grading.verify_at_least_one_record_with_json_value(
                self.grading_topic,
                self.grading_value
            )
        ]
        Console(items).run_items(action='Grading')
