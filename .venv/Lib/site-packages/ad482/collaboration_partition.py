from labs.grading import Default as GuidedExercise
from labs.common.userinterface import Console
from ad482.common import prechecks, steps
from pathlib import Path


class CollaborationPartition(GuidedExercise):

    __LAB__ = "collaboration-partition"

    """
    Guided Exercise: Partitioning Stream Processing for Scalability
    """

    one_partition_topics = [
        'temperatures-in-celsius',
        'measured-temperatures',
    ]

    two_partition_topics = [
        'temperatures-in-celsius-repartitioned'
    ]

    def start(self):
        prechecks.verify_config()
        env_file_path = Path(self.__LAB__, "temperature-monitor", ".env")

        items = [
            steps.pull_apps_repo(),
            steps.copy_lab_files(Path(self.__LAB__, "apps"), self.__LAB__),
            steps.copy_env_file(env_file_path, ".env-streams"),
            steps.check_ocp_api(),
            steps.check_ocp_credentials(),
            steps.move_to_kafka_cluster_namespace(),
            steps.check_kafka_connection(),
            steps.create_topics(self.one_partition_topics),
            steps.create_topics(self.two_partition_topics, 2)
        ]
        Console(items).run_items(action="Starting")

    def finish(self):
        items = [
            steps.check_ocp_api(),
            steps.check_ocp_credentials(),
            steps.move_to_kafka_cluster_namespace(False),
            steps.delete_topics(
                self.one_partition_topics + self.two_partition_topics
            ),
        ]
        Console(items).run_items(action="Finishing")
