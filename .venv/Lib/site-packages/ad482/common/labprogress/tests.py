from typing import Callable, List
from inspect import isfunction


def test(description: str):
    """
    Decorates a function to be a lab progress test.
    It adds a labcheck description
    """
    def decorator(func):
        func.description = description
        return func

    return decorator


def is_test(fn: Callable):
    """
    Check whether a function is a lab progress test
    """
    return isfunction(fn) and hasattr(fn, "description")


def expect(condition: bool, error="", hints: List[str] = []):
    """
    Expects a condition to be True
    If false, raises an error with error_msg and hints

    This is a workaround to avoid the use of the built-in "assert" expression,
    which is ignored when python runs in optmized mode (__debug__ == False)
    https://docs.python.org/3.6/reference/simple_stmts.html#the-assert-statement
    """
    if not condition:
        raise TestError(error or "Test failed", hints)


class TestError(AssertionError):
    message: str
    hints: List[str]

    def __init__(self, message: str, hints: List[str] = []) -> None:
        self.message = message
        self.hints = hints
        super().__init__(message)
