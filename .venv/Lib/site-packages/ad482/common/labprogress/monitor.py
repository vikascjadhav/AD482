"""
Watches the exercise by running tests in an infinite loop
"""
from time import sleep
from typing import Callable, List, Optional
from inspect import getmembers
from .tests import is_test
from . import console


class LabProgressMonitor:

    """
    Watches a lab by executing a set of tests
    """

    tests: List[Callable]
    labname: str
    sleep_seconds: int
    on_finish: Optional[Callable]

    def __init__(self, tests: List[Callable],
                 labname="", sleep_seconds=1, on_finish=None):
        self.tests = [t for t in tests if is_test(t)]
        self.labname = labname
        self.sleep_seconds = sleep_seconds
        self.on_finish = on_finish

    @classmethod
    def with_tests_from(cls, module, **kargs):
        checks = [func for _, func in getmembers(module, is_test)]
        return cls(checks, kargs)

    def watch(self):
        """
        Watch the exercise by running the checks
        """
        done = False
        while not done:
            console.clear()
            done = self.test_once()
            sleep(self.sleep_seconds)

        self.finish()

    def test_once(self):
        """
        Execute a test pass once.
        Returns True if all tests pass.
        """
        passing = 0
        failing = 0

        console.echo_header(self.labname)

        for i, test in enumerate(self.tests, start=1):
            try:
                test()
                console.echo_test(test.description, i)
                passing += 1
            except AssertionError as error:
                console.echo_test(test.description, i, error)
                failing += 1

        console.echo_footer(passing, failing)

        return failing == 0

    def finish(self):
        """
        Finish the lab monitorization.
        """
        console.echo_lab_success()

        if self.on_finish and console.confirm_finish():
            self.on_finish()
