# Expose singleton oc clients indexed by server url
from time import sleep
from typing import Callable, Iterable, TypeVar
from typing import List

from .client import KafkaPublisher
from .serdes import json_deserializer
from ..classroom import KafkaClassroomConfig, workspace

client_instances = {}


def get_kafka_client(bootstrap_server: str,
                     bootstrap_port: int,
                     cert_path: str,
                     consumer_timeout_ms: float = 1000.0,
                     value_deserializer=json_deserializer,
                     auto_offset_reset: str = 'earliest',
                     enable_auto_commit: bool = False
                     ):
    """
    Returns the kafka client configured to connect to the specified bootstrap
    server
    """
    from .client import KafkaClient

    instance = client_instances.get(bootstrap_server)

    if not instance:
        client_instances[bootstrap_server] = instance = KafkaClient(
            bootstrap_server, bootstrap_port, cert_path,
            consumer_timeout_ms, value_deserializer,
            auto_offset_reset, enable_auto_commit)

    return instance


T = TypeVar("T")


def produce_many(
        topic: str,
        records: Iterable[T],
        config: KafkaClassroomConfig = None,
        value_serializer: Callable[[T], bytes] = None,
        key_serializer: Callable[[T], bytes] = None,
        sleep_seconds=5,
        callback: Callable[[str, T], None] = None
):
    """
    Produce multiple values to a Kafka topic
    """
    producer = KafkaPublisher.from_config(
        config or workspace.config,
        value_serializer,
        key_serializer)

    for record in records:
        if type(record) is tuple:
            key, value = record
        else:
            key = None
            value = record

        producer.produce(topic, value, key)
        if callback:
            record = (key, value) if key else value
            callback(topic, record)
        sleep(sleep_seconds)


def is_state_store_name(topic_name: str, state_store_names: List[str]):
    for store_name in state_store_names:
        if store_name in topic_name:
            return True

    return False
