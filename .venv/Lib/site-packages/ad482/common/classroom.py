"""
This module initializes the AD482 classroom config and workspace.
The "workspace" object exposes functionality to manage the workspace
"""

import os
from typing import Dict

from labs.common.config import ClassroomConfigJsonFile, default_config_path
from labs.common.workspace import Workspace

from .constants import COURSE_SKU


class OcpClassroomConfig(ClassroomConfigJsonFile):

    """
    Config file for a classroom that uses OCP
    """

    ocp_api: str
    ocp_username: str
    ocp_password: str

    def __init__(self,
                 workdir: str,
                 ocp_api: str,
                 ocp_username: str,
                 ocp_password: str,
                 filepath: str = None):
        """
        :param workdir: Workspace folder
        :param ocp_api: OpenShift API url
        :param ocp_username: OpenShift username
        :param ocp_password: OpenShift password
        """

        self.ocp_api = ocp_api
        self.ocp_username = ocp_username
        self.ocp_password = ocp_password

        filepath = str(
            filepath
            or default_config_path(f"{COURSE_SKU.lower()}-workspace.json")
        )

        super().__init__(filepath, workdir)

    @classmethod
    def empty(cls, filepath=None):
        return cls(None, None, None, None, filepath)

    @classmethod
    def from_file(cls, filepath: str):
        return cls.empty(filepath).load()

    @classmethod
    def from_dict(cls, items: Dict):
        return cls(**items)


class KafkaClassroomConfig(OcpClassroomConfig):
    """
    Config file for a Kafka classroom that relies in OCP
    """
    kafka_bootstrap_server: str
    kafka_bootstrap_port: int
    kafka_cert_path: str
    kafka_cluster_namespace: str

    def __init__(self,
                 workdir: str,
                 ocp_api: str,
                 ocp_username: str,
                 ocp_password: str,
                 kafka_bootstrap_server: str,
                 kafka_bootstrap_port: int,
                 kafka_cert_path: str,
                 kafka_cluster_namespace: str,
                 filepath: str = None):
        """
        :param workdir: Workspace folder
        :param ocp_api: OpenShift API url
        :param ocp_username: OpenShift username
        :param ocp_password: OpenShift password
        :param kafka_bootstrap_server: Apache Kafka bootstrap server
        :param kafka_bootstrap_port: Apache Kafka bootstrap port
        :param kafka_cert_path: Path to the Apache Kafka cluster certificate
        """

        self.kafka_bootstrap_server = kafka_bootstrap_server
        self.kafka_bootstrap_port = kafka_bootstrap_port
        self.kafka_cert_path = kafka_cert_path
        self.kafka_cluster_namespace = kafka_cluster_namespace

        filepath = str(
            filepath
            or default_config_path(f"{COURSE_SKU.lower()}-workspace.json")
        )

        super().__init__(
            workdir,
            ocp_api,
            ocp_username,
            ocp_password,
            filepath
        )

    @classmethod
    def empty(cls, filepath=None):
        return cls(None, None, None, None, None, None, None, None, filepath)


# Instantiate the workspace
configfile = os.environ.get(f"{COURSE_SKU}_CONFIG")
workspace = Workspace(KafkaClassroomConfig.from_file(configfile))


def is_workspace_ready():
    return workspace.config.workdir is not None
