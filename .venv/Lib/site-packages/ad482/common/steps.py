"""
Common lab steps exclusive to AD482 GEs/Labs
"""

from pathlib import Path
from typing import List, Union

from ocpcli import tasks as ocptasks

from . import generate_project_name, tasks
from .classroom import workspace
from .kafka.config import KafkaConfig
from .constants import COURSE_SKU, KAFKA_CLUSTER_NAME


def check_kafka_connection(fatal: bool = True):
    config = KafkaConfig.from_workspace()

    return {
        "label": "Verifying your Kafka settings",
        "task": tasks.check_kafka_connection(config),
        "fatal": fatal
    }


def check_ocp_api(fatal: bool = True):
    return {
        "label": "Verifying your OpenShift API URL",
        "task": ocptasks.check_ocp_api,
        "endpoint": workspace.config.ocp_api,
        "fatal": fatal,
    }


def check_ocp_credentials(fatal: bool = True):
    return {
        "label": "Verifying your OpenShift user credentials",
        "task": ocptasks.check_ocp_credentials,
        "endpoint": workspace.config.ocp_api,
        "username": workspace.config.ocp_username,
        "password": workspace.config.ocp_password,
        "fatal": fatal,
    }


def create_service_registry_postgresql(project: str, fatal: bool = True):
    return {
        "label": "Creating ephemeral storage for the Service Registry",
        "task": tasks.create_service_registry_postgresql(
            generate_project_name(workspace.config.ocp_username, project),
            workspace.config.ocp_api
        ),
        "fatal": fatal
    }


def create_kafka_cluster(cluster: str, broker_replicas: int,
                         fatal: bool = True):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username

    return {
        "label": f"Creating a Kafka cluster: {cluster}",
        "task": tasks.create_kafka_cluster(cluster, broker_replicas, ocp_api,
                                           ocp_username),
        "fatal": fatal
    }


# TODO: Renaming this method is a must, because it
# deletes the project not the actual Kafka cluster
def delete_kafka_cluster(fatal: bool = True):
    return {
        "label": "Deleting the Apache Kafka Cluster",
        "task": tasks.delete_kafka_cluster,
        "endpoint": workspace.config.ocp_api,
        "username": workspace.config.ocp_username,
        "fatal": fatal,
    }


def create_ocp_projects(project_suffix: List[str], fatal: bool = True):
    return {
        "label": "Creating OpenShift projects",
        "task": ocptasks.create_projects,
        "endpoint": workspace.config.ocp_api,
        "username": workspace.config.ocp_username,
        "password": workspace.config.ocp_password,
        "projects": [generate_project_name(workspace.config.ocp_username,
                                           project) for project in
                     project_suffix],
        "fatal": fatal
    }


def create_service_registry(project: str, fatal: bool = True):
    return {
        "label": "Installing the Service Registry",
        "task": tasks.create_service_registry(
            generate_project_name(workspace.config.ocp_username, project),
            workspace.config.ocp_api
        ),
        "fatal": fatal
    }


def delete_ocp_projects(projects: List[str], fatal: bool = False):
    return {
        "label": "Deleting OpenShift projects",
        "task": ocptasks.delete_projects,
        "endpoint": workspace.config.ocp_api,
        "username": workspace.config.ocp_username,
        "password": workspace.config.ocp_password,
        "projects": [generate_project_name(workspace.config.ocp_username,
                                           project) for project in projects],
        "fatal": fatal
    }


def create_topics(topics: List[str], partitions: int = 1, label=None,
                  fatal: bool = True):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username
    topics_str = ", ".join(topics)

    step_label = (
            label
            or
            f"Creating topics ({partitions} partition): {topics_str}"
    )

    return {
        "label": step_label,
        "task": tasks.create_topics(
            topics, ocp_api, ocp_username, KAFKA_CLUSTER_NAME, partitions),
        "fatal": fatal
    }


def delete_topics(topics: List[str], fatal: bool = False):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username
    topics_str = ", ".join(topics)

    return {
        "label": f"Deleting topics: {topics_str}",
        "task": tasks.delete_topics(topics, ocp_api, ocp_username),
        "fatal": fatal
    }


def create_env_files(fatal: bool = False):
    return {
        "label": "Creating .env files for the exercises",
        "task": tasks.create_env_files(workspace.config.workdir),
        "fatal": fatal
    }


def regenerate_env_files(fatal: bool = False):
    return {
        "label": "Regenerating the .env files for the exercises",
        "task": tasks.create_env_files(workspace.config.workdir),
        "fatal": fatal
    }


def create_connect_cluster(cluster: str, image: str, fatal: bool = True):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username

    return {
        "label": f"Creating a Kafka Connect cluster: {cluster}",
        "task": tasks.create_connect_cluster(cluster, image, ocp_api,
                                             ocp_username),
        "fatal": fatal
    }


def delete_connect_cluster(cluster: str, fatal: bool = False):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username

    return {
        "label": f"Deleting the Kafka Connect cluster: {cluster}",
        "task": tasks.delete_connect_cluster(cluster, ocp_api, ocp_username),
        "fatal": True
    }


def delete_connect_connectors(connectors: List[str], fatal: bool = False):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username
    connectors_str = ", ".join(connectors)

    return {
        "label": f"Deleting Kafka Connect connectors: {connectors_str}",
        "task": tasks.delete_connect_connectors(connectors, ocp_api,
                                                ocp_username),
        "fatal": fatal
    }


def create_elasticsearch_cluster(cluster: str, fatal: bool = True):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username

    return {
        "label": f"Creating an ElasticSearch cluster: {cluster}",
        "task": tasks.create_elasticsearch_cluster(cluster, ocp_api,
                                                   ocp_username),
        "fatal": fatal
    }


def delete_elasticsearch_cluster(cluster: str, fatal: bool = False):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username

    return {
        "label": f"Deleting the ElasticSearch cluster: {cluster}",
        "task": tasks.delete_elasticsearch_cluster(cluster, ocp_api,
                                                   ocp_username),
        "fatal": fatal
    }


def create_postgresql(database_service_name: str, database_name: str,
                      init_sql_statements: str, fatal: bool = True):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username

    return {
        "label": f"Creating a Postgresql instance: {database_service_name}",
        "task": tasks.create_postgresql(database_service_name, database_name,
                                        init_sql_statements, ocp_api,
                                        ocp_username),
        "fatal": fatal
    }


def create_postgresql_from_file(database_service_name: str, database_name: str,
                                init_sql_statements_file_path: str,
                                fatal: bool = True):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username

    with open(init_sql_statements_file_path) as file:
        init_sql_statements = file.read().replace("\n", " ")
        file.close()

        return {
            "label":
                f"Creating a Postgresql instance: {database_service_name}",
            "task": tasks.create_postgresql(database_service_name,
                                            database_name,
                                            init_sql_statements, ocp_api,
                                            ocp_username),
            "fatal": fatal
        }


def delete_postgresql(database_service_name: str, fatal: bool = False):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username

    return {
        "label": f"Deleting the Postgresql instance: {database_service_name}",
        "task": tasks.delete_postgresql(database_service_name, ocp_api,
                                        ocp_username),
        "fatal": fatal
    }


def apply_resource(resource_path: str, status_check_match_param={
    'type': 'Ready',
    'status': 'True',
}, label="Applying resource", fatal: bool = True):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username

    return {
        "label": label,
        "task": tasks.apply_resource(resource_path, status_check_match_param,
                                     ocp_api, ocp_username),
        "fatal": fatal
    }


def pull_apps_repo(fatal: bool = True):
    return {
        "label": f"Pulling latest changes from '{COURSE_SKU}-apps'",
        "task": tasks.pull_apps_repo(),
        "fatal": fatal
    }


def copy_env_file(
        destination: Union[Path, str],
        filename: Union[Path, str] = ".env",
        fatal: bool = True
):
    """
    Copy an env file

    :param destination: Relative to workspace/
    :param filename: Relative to workspace/ (default is .env)
    """
    return {
        "label": "Copying env file",
        "task": tasks.copy_file(filename, destination),
        "fatal": fatal
    }


def copy_lab_files(
        app_dir_path: Union[Path, str],
        destination: Union[Path, str],
        fatal: bool = True
):
    """
    Copy files from "AD482-apps/" into a dir in the workspace root

    :param app_dir_path: Relative to workspace/AD482-apps
    :param destination: Relative to workspace/
    """
    return {
        "label": "Copying lab files to workspace",
        "task": tasks.copy_lab_files(app_dir_path, destination),
        "fatal": fatal
    }


def copy_lab_app(labname: str, appname: str, fatal: bool = True):
    """
    Equivalent to "copy_lab_files("labname/apps/appname", "labname")
    """

    source = Path(labname, "apps", appname)
    destination = labname

    return {
        "label": "Copying lab files to workspace",
        "task": tasks.copy_lab_files(source, destination),
        "fatal": fatal
    }


def delete_state_store_topics(topics: List[str], fatal: bool = False):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username

    return {
        "label": f"Deleting state store topics: {topics}",
        "task": tasks.delete_state_stores(topics, ocp_api, ocp_username),
        "fatal": fatal
    }


def move_to_kafka_cluster_namespace(fatal: bool = True):
    ocp_api = workspace.config.ocp_api
    ocp_username = workspace.config.ocp_username

    return {
        "label": "Moving to the Kafka namespace",
        "task": tasks.move_to_kafka_namespace(ocp_api, ocp_username),
        "fatal": fatal
    }
