Metadata-Version: 2.1
Name: rht-labs-ocpcli
Version: 0.10.0
Summary: Red Hat Training Labs OpenShift Library
Home-page: https://github.com/RedHatTraining/rht-labs-ocpcli/
Author: Jaime Ramírez
Author-email: jaime.ramirez@redhat.com
Maintainer: Jaime Ramírez
Maintainer-email: jaime.ramirez@redhat.com
License: UNKNOWN
Project-URL: Source, https://github.com/RedHatTraining/rht-labs-ocpcli
Project-URL: Tracker, https://github.com/RedHatTraining/rht-labs-ocpcli/issues
Keywords: training,labs
Platform: any
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Students
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Topic :: Training
Classifier: Topic :: Utilities
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE

# Lab Framework OpenShift `oc`-based Modules

This package uses https://github.com/openshift/openshift-client-python, which is based in the `oc` CLI.

> **⚠ WARNING: Conflict with `rht-labs-ocp`**
>
> Do not install this package together with `rht-labs-ocp` in the same virtual environment.
> `rht-labs-ocpcli` and `rht-labs-ocp` use different conflicting OpenShift libraries, and they cannot coexist.
>
> There is [an open issue to address this problem](https://github.com/openshift/openshift-client-python/issues/75).


- [Lab Framework OpenShift `oc`-based Modules](#lab-framework-openshift-oc-based-modules)
  - [Prerequisites](#prerequisites)
  - [Installation](#installation)
  - [Client Commands](#client-commands)
  - [Tasks](#tasks)
    - [check_ocp_api](#check_ocp_api)
    - [check_ocp_credentials](#check_ocp_credentials)
  - [Development](#development)
    - [Setup for development](#setup-for-development)
    - [Test, lint and publish](#test-lint-and-publish)
  - [Versions & Releases](#versions--releases)
    - [Versioning](#versioning)
    - [Releases to PyPI Stage](#releases-to-pypi-stage)
    - [Releasing to PyPI Prod](#releasing-to-pypi-prod)


## Prerequisites

Make sure `oc` is installed in your system and included in your PATH.

## Installation

    pip install rht-labs-ocpcli --extra-index-url https://pypi.apps.tools.dev.nextcle.com/repository/labs/simple


## Client Commands

The `ocpcli.client` module exposes OCP commands to help you develop your custom tasks.
## Tasks

The `ocpcli.tasks` exports tasks ready to be used in start/finish/grade DynoLabs scripts.

### check_ocp_api

```python
from ocpcli.tasks import check_ocp_api

items = [{
    "label": "Verifying your OpenShift API URL",
    "task": check_ocp_api,
    "endpoint": workspace.config.ocp_api,
    "fatal": True,
}]
```

### check_ocp_credentials

```python
from ocpcli.tasks import check_ocp_credentials

items = [{
    "label": "Verifying your OpenShift user credentials",
    "task": check_ocp_credentials,
    "endpoint": workspace.config.ocp_api,
    "username": workspace.config.ocp_username,
    "password": workspace.config.ocp_password,
    "fatal": True,
}]
```

## Development

### Setup for development

Create a virtual environment and install dependencies.

```sh
$ python3 -m venv .venv
$ source .venv/bin/activate
$ pip install -r requirements.txt
```

### Test, lint and publish

To run the tests, run `make test`.

To run the flake8 linter, run `make lint`.

To publish the package, update the `__version__` variable in `ocpcli/__init__.py` and then run:

```sh
PS_PASSWD=... make publish-stage
```
For production pypi:

```sh
PS_PASSWD_PROD=... make publish-prod
```

## Versions & Releases

New versions of this package are released to two PyPI servers:

* Stage: https://pypi.apps.tools.dev.nextcle.com/repository/labs/
* Prod: https://pypi.apps.tools-na.prod.nextcle.com/repository/labs/

### Versioning

This package follows a **semantic versioning** approach.

The version is specified in the `ocpcli/version.py` file.

> **WARNING**: Do not edit the version file!
Instead, [build the Jenkins pipeline](https://jenkins.prod.nextcle.com/job/Dynolabs/job/rht-labs-ocpcli/job/main/) to create and release new versions.
Jenkins will modify the version file a create new tags

### Releases to PyPI Stage

Jenkins pushes a development version for each new Pull Request to [PyPI Stage](https://pypi.apps.tools.dev.nextcle.com/#browse/browse:labs)

The development version follows the `X.Y.Z.dev${PR-number}` format, where `X.Y.Z` is the semantic version specified in the `ocpcli/version.py` file.

Example:

```
YOU open the Pull Request #23 ----> Jenkins creates a "X.Y.Z.devPR-23" dev version ----> Jenkins pushes the version to PyPI Stage
```

Releases to PyPI Stage do not modify the version file.

Development versions can be installed as any other version, for example:

```sh
pip install rht-labs-ocpcli==0.2.12.devPR-23 --extra-index-url https://pypi.apps.tools.dev.nextcle.com/repository/labs/simple
```

### Releasing to PyPI Prod

To release to Prod:

1. Go to: **[Release to PROD](https://jenkins.prod.nextcle.com/job/Dynolabs/job/rht-labs-ocpcli/job/main/build)**
2. Select the `VersionBump` increment (major|minor|patch).
Jenkins will modify the version file, create a Git tag with the version, and push the changes to the main branch.
3. Select `Publish`.
This will make Jenkins push the new version to PyPI Prod, and create a new GitHub release.
4. Click `Build`.

> **NOTE**: You can only release to PROD from to the main branch



